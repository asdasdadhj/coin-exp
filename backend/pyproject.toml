[project]
name = "crypto-tracker-backend"
version = "1.0.0"
description = "Cryptocurrency price tracker backend with Flask"
authors = [
    {name = "Crypto Tracker", email = "crypto@tracker.dev"}
]
readme = "README_CRYPTO.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["cryptocurrency", "bitcoin", "ethereum", "flask", "api"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Flask",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    "flask>=2.3.0,<3.0.0",
    "requests>=2.31.0,<3.0.0",
    "werkzeug>=2.3.0,<3.0.0",
]

[project.urls]
Homepage = "https://github.com/crypto-tracker/backend"
Repository = "https://github.com/crypto-tracker/backend.git"
Issues = "https://github.com/crypto-tracker/backend/issues"

[project.scripts]
crypto-tracker = "crypto_tracker:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-requests>=2.31.0",
]

[tool.ruff]
# Set target Python version
target-version = "py39"

# Set line length to match Black
line-length = 100

# Linting configuration
[tool.ruff.lint]
# Enable recommended rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
]

# Ignore common false positives and conflicts with Black
ignore = [
    "E501",  # line too long, handled by Black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (let developers decide)
    "S101",  # use of assert (common in tests)
    "T201",  # print statements (useful for CLI apps)
    "S104",  # hardcoded bind all interfaces (common in dev)
    "S201",  # use of debug=True (common in dev)
    "ARG001", # unused function arguments (common in Flask)
    "ARG002", # unused method arguments
]

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/**/*.py" = ["S101", "ARG001", "ARG002"]  # allow asserts and unused args in tests

# Configure specific rule behavior
[tool.ruff.lint.isort]
known-first-party = ["crypto_tracker"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
[tool.hatch.build.targets.wheel]
include = [
    "crypto_tracker.py",
]
